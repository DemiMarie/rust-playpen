:root {
    background-color: #f0f0ea;
    background-image: linear-gradient(#e0e0da, #f0f0ea 400px);
    background-image: linear-gradient(#e0e0da, #f0f0ea 50vh);
    background-repeat: no-repeat;
    color: #202020;
    overflow-x: hidden;
    height: 100%;
}

:root::before {
    content: url(rust.png);
    position: absolute;
    top: -128px;
    right: -128px;
    width: 512px;
    height: 512px;
    opacity: 0.5;
    z-index: -1;
    display: block;
    -webkit-transform: rotate(15deg);
    transform: rotate(15deg);
}

:root, button {
    line-height: 1.4;
}

:root, button, label {
    font-family: sans-serif;
    font-size: 1rem;
}

.message {
    color: #999;
    font-style: italic;
}

.error {
    font-weight: bold;
    color: #931;
}

.rustc-errors {
    color: #931;
}

.rustc-warnings {
    color: #971;
}

.shortening-link {
    color: #ddf;
    position: relative;
    letter-spacing: -1ex;
    -webkit-animation: scrunch-letters 2s;
    -ms-animation: scrunch-letters 2s;
    -o-animation: scrunch-letters 2s;
    animation: scrunch-letters 2s;
}

@-webkit-keyframes scrunch-letters {
    0% { letter-spacing: 0; }
    10% { letter-spacing: 0; }
}

@-o-keyframes scrunch-letters {
    0% { letter-spacing: 0; }
    10% { letter-spacing: 0; }
}

@keyframes scrunch-letters {
    0% { letter-spacing: 0; }
    10% { letter-spacing: 0; }
}

.shortening-link::before {
    content: "shrinking…";
    font-style: italic;
    position: absolute;
    color: #666;
    letter-spacing: 0;
}

/*
@media screen and (min-width: 1000px) {
    #control::before {
        content: "Rust Playground";
        font-size: 2.0em;
        display: inline-block;
        vertical-align: middle;
        margin-right: 0.5em;
    }
}
*/

#evaluate::after {
    content: '▶';
    margin-left: 8px;
}

#control > div {
    margin-right: 0.5em;
}

#share { /* The last of the buttons, put in a little more space */
    margin-right: 0.5em;
}

button:first-child {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
    border-left-width: 1px;
}

button:last-child {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
}

button {
    color: #333;
    background-color: #fff;
    border: 1px solid rgba(153, 153, 153, 0.5);
    border-left-width: 0;
    padding: 0.25em 0.5em;
    vertical-align: middle;
    cursor: pointer;
    outline: 0;
}

button::-moz-focus-inner {
    border: 0;
}

label {
    cursor: pointer;
}

button:hover, button:focus, button:active {
    background: #ebebeb;
}

button.primary {
    color: #fff;
    background-color: #a42;
    border-width: 0;
    font-size: 1.4em;
    border-radius: 4px;
}

button.primary:hover, button.primary:focus, button.primary:active {
    background-color: #931;
}

#control > * {
    display: inline-block;
    vertical-align: middle;
}

.radios {
    position: relative;
}

.radios > :first-child {
    position: absolute;
    left: 4px;
    right: 4px;
    border-radius: 4px 4px 0 0;
    top: -1.4em;
    font-size: 0.8em;
    text-align: center;
    background: rgba(255, 255, 255, 0.5);
}

.radios > :last-child {
    white-space: nowrap;
    background: #fff;
    border-radius: 4px;
}

#configure-editor {
    line-height: 0;
    padding: 0.25em;
    border-radius: 4px;
}

.right-c-e {
    /* Because of float: right we can’t use vertical-align: middle and so compensate manually */
    float: right;
    margin-top: 0.5em;
}

#configure-editor span {
    background: url("data:image/svg+xml,%3C?xml version='1.0' standalone='no'?%3E%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16' version='1.1'%3E%3Cpath fill='%23a42' stroke='%23931' stroke-width='1' d='M 7,0.5 6.5,1 6.5,3 6,3.5 5.5,3.5 4,2 3,2 2,3 2,4 3.5,5.5 3.5,6 3,6.5 1,6.5 0.5,7 l 0,2 0.5,0.5 2,0 0.5,0.5 0,0.5 -1.5,1.5 0,1 1,1 1,0 1.5,-1.5 0.5,0 0.5,0.5 0,2 0.5,0.5 2,0 0.5,-0.5 0,-2 0.5,-0.5 0.5,0 1.5,1.5 1,0 1,-1 0,-1 -1.5,-1.5 0,-0.5 0.5,-0.5 2,0 L 15.5,9 15.5,7 15,6.5 13,6.5 12.5,6 12.5,5.5 14,4 14,3 13,2 12,2 10.5,3.5 10,3.5 9.5,3 9.5,1 9,0.5 Z m 1,5 c 1.5,0 2.5,1 2.5,2.5 0,1.5 -1,2.5 -2.5,2.5 C 6.5,10.5 5.5,9.5 5.5,8 5.5,6.5 6.5,5.5 8,5.5 Z'/%3E%3C/svg%3E");
    background-size: 100% 100%;
    width: 16px;
    height: 16px;
    text-indent: -999em;
    display: inline-block;
    overflow: hidden;
}

.dropdown {
    display: none;
    position: absolute;
    right: 0em;
    margin-top: 1em;
    z-index: 100;
    background: #fff;
    border: 1px solid #bbb;
    border-radius: 4px;
    padding: 0 1em;
    box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
}

.dropdown::before {
    content: "";
    border-left: 1px solid #bbb;
    border-top: 1px solid #bbb;
    position: absolute;
    width: 1em;
    height: 1em;
    right: 0.8em;
    top: -1em;
    background-color: white;
    box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);
    transform: translateY(0.414214em) rotate(45deg);
}

.radios label:first-of-type {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
}

.radios label:last-child {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
    border-right-width: 1px;
}

.radios label {
    color: #333;
    background: rgba(170, 68, 34, 0.1);
    transition: 0.2s background;
    border: 1px solid rgba(170, 68, 34, 0.4);
    border-right-width: 0;
    padding: 0.25em 0.5em;
    display: inline-block;
}

.radios label:hover,
.radios:focus label,
.radios:active label {
    background: rgba(170, 68, 34, 0.4);
}

input[type=radio] {
    /* TODO: this should keep tab indexing, but for some reason it’s not working */
    position: absolute;
    visibility: hidden;
}

input[type=radio]:checked + label {
    background: rgba(170, 68, 34, 0.5);
    border-right-width: 1px;
}

input[type=radio]:checked + label + input + label {
    border-left-width: 0;
}

input[type=radio]:checked + label:hover,
input[type=radio]:checked:focus + label,
input[type=radio]:checked:active + label {
    background: rgba(170, 68, 34, 0.7);
    border-right-width: 1px;
}

input[type=radio]:checked + label:hover + input + label,
input[type=radio]:checked:focus + label + input + label,
input[type=radio]:checked:active + label + input + label {
    border-left-width: 0;
}

#editor, pre {
    font-size: 0.9rem;
    font-family: Source Code Pro, monospace;
}

#editor {
    border: 3px solid rgba(153, 153, 153, 0.5);
    border-bottom: 0;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
}

#result {
    background: rgba(255, 255, 255, 0.5);
    overflow: auto;
    border: 3px solid rgba(153, 153, 153, 0.5);
    border-top: 0;
    border-bottom-left-radius: 5px;
    border-bottom-right-radius: 5px;
    padding: 0 1em;
}

#result:not(:empty) {
    border-top: 1px solid #ccc;
}

button[disabled] {
    position: relative;
}

button[disabled]::before {
    content: "";
    position: absolute;
    bottom: -1px;
    left: -1px;
    right: -1px;
    height: 4px;
    background: #931;
    opacity: 0;
    -webkit-animation: throb 1s infinite alternate ease-in-out;
    -ms-animation: throb 1s infinite alternate ease-in-out;
    -o-animation: throb 1s infinite alternate ease-in-out;
    animation: throb 1s infinite alternate ease-in-out;
}

button[disabled]:first-child::before {
    border-bottom-left-radius: 4px;
}

button[disabled]:last-child::before {
    border-bottom-right-radius: 4px;
}

.primary[disabled]::before {
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 0 0 4px 4px;
    background: rgba(255, 255, 255, 0.5);
}

@-webkit-keyframes throb {
    0% { opacity: 0.5; }
    100% { opacity: 1; }
}

@-o-keyframes throb {
    0% { opacity: 0.5; }
    100% { opacity: 1; }
}

@keyframes throb {
    0% { opacity: 0.5; }
    100% { opacity: 1; }
}

/* Layout stuff. Absolute positioning is easiest, I must confess. We could get all fancy with flexbox if we wanted to. */

#control, #editor, #result {
    position: absolute;
    box-sizing: border-box;
    width: unset;
    height: unset;
    margin: unset;
    left: 1rem;
    right: 1rem;
}

#control {
    top: 1.4rem;
    /* Actual height: 43px; */
}

#editor {
    top: 82px; /* 81.4px = 43px (#control height) + 1.4em (#control top) + 1em (spacing between) @ 1em = 16px */
    bottom: 30%;
}

#result {
    top: 70%;
    bottom: 1rem;
}

#result:empty {
    bottom: unset;
}

/* Overrides of theme styles to make their backgrounds semi-transparent so the page background and Rust logo show through somewhat. TODO: do these some better way.
 * The :root is to override specificity.
 * Colours are multiplied by 2 tackily (i.e. each channel of RGB separately, HSL would be more accurate) and opacity is halved. e.g. #e8e8e8ff becomes #d1d1d17f.
 * Those colours that that *really* didn’t seem right for retain their RGB values and gain a = 0.8.
 */
:root .ace-github { background: rgba(255, 255, 255, 0.5); }
:root .ace-github .ace_gutter { background: rgba(209, 209, 209, 0.5); }
:root .ace-github.ace_focus .ace_marker-layer .ace_active-line { background: rgba(255, 255, 153, 0.5); }
:root .ace-github .ace_marker-layer .ace_active-line { background: rgba(235, 235, 235, 0.5); }
:root .ace-github .ace_marker-layer .ace_selection { background: rgba(107, 171, 255, 0.5); }
:root .ace-github .ace_marker-layer .ace_step { background: rgba(255, 255, 0, 0.8); }
:root .ace-github .ace_marker-layer .ace_stack { background: rgba(164, 229, 101, 0.8); }
:root .ace-github .ace_marker-layer .ace_selected-word { background: rgba(245, 245, 255, 0.5); }
:root .ace-github .ace_print-margin { background: rgba(209, 209, 209, 0.5); }

/* Pygments github style */
.highlight .hll { background-color: #ffffcc }
.highlight .c { color: #999988; font-style: italic } /* Comment */
.highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.highlight .k { color: #000000; font-weight: bold } /* Keyword */
.highlight .o { color: #000000; font-weight: bold } /* Operator */
.highlight .cm { color: #999988; font-style: italic } /* Comment.Multiline */
.highlight .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */
.highlight .c1 { color: #999988; font-style: italic } /* Comment.Single */
.highlight .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */
.highlight .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */
.highlight .ge { color: #000000; font-style: italic } /* Generic.Emph */
.highlight .gr { color: #aa0000 } /* Generic.Error */
.highlight .gh { color: #999999 } /* Generic.Heading */
.highlight .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */
.highlight .go { color: #888888 } /* Generic.Output */
.highlight .gp { color: #555555 } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #aaaaaa } /* Generic.Subheading */
.highlight .gt { color: #aa0000 } /* Generic.Traceback */
.highlight .kc { color: #000000; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */
.highlight .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */
.highlight .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */
.highlight .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #445588; font-weight: bold } /* Keyword.Type */
.highlight .m { color: #009999 } /* Literal.Number */
.highlight .s { color: #d01040 } /* Literal.String */
.highlight .na { color: #008080 } /* Name.Attribute */
.highlight .nb { color: #0086B3 } /* Name.Builtin */
.highlight .nc { color: #445588; font-weight: bold } /* Name.Class */
.highlight .no { color: #008080 } /* Name.Constant */
.highlight .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */
.highlight .ni { color: #800080 } /* Name.Entity */
.highlight .ne { color: #990000; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #990000; font-weight: bold } /* Name.Function */
.highlight .nl { color: #990000; font-weight: bold } /* Name.Label */
.highlight .nn { color: #555555 } /* Name.Namespace */
.highlight .nt { color: #000080 } /* Name.Tag */
.highlight .nv { color: #008080 } /* Name.Variable */
.highlight .ow { color: #000000; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mf { color: #009999 } /* Literal.Number.Float */
.highlight .mh { color: #009999 } /* Literal.Number.Hex */
.highlight .mi { color: #009999 } /* Literal.Number.Integer */
.highlight .mo { color: #009999 } /* Literal.Number.Oct */
.highlight .sb { color: #d01040 } /* Literal.String.Backtick */
.highlight .sc { color: #d01040 } /* Literal.String.Char */
.highlight .sd { color: #d01040 } /* Literal.String.Doc */
.highlight .s2 { color: #d01040 } /* Literal.String.Double */
.highlight .se { color: #d01040 } /* Literal.String.Escape */
.highlight .sh { color: #d01040 } /* Literal.String.Heredoc */
.highlight .si { color: #d01040 } /* Literal.String.Interpol */
.highlight .sx { color: #d01040 } /* Literal.String.Other */
.highlight .sr { color: #009926 } /* Literal.String.Regex */
.highlight .s1 { color: #d01040 } /* Literal.String.Single */
.highlight .ss { color: #990073 } /* Literal.String.Symbol */
.highlight .bp { color: #999999 } /* Name.Builtin.Pseudo */
.highlight .vc { color: #008080 } /* Name.Variable.Class */
.highlight .vg { color: #008080 } /* Name.Variable.Global */
.highlight .vi { color: #008080 } /* Name.Variable.Instance */
.highlight .il { color: #009999 } /* Literal.Number.Integer.Long */
